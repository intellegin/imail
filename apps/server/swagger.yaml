openapi: 3.0.0
info:
  title: imail API
  version: 1.0.0
  description: API documentation for imail
servers:
  - url: http://localhost:3001/api
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        username:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
paths:
  /users:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                username:
                  type: string
                name:
                  type: string
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid input
        409:
          description: User already exists
  /users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
        404:
          description: User not found
    put:
      summary: Update user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                name:
                  type: string
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
        404:
          description: User not found
    delete:
      summary: Delete user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found 